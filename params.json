{"name":"ALAlertBanner","tagline":"A clean and simple alert banner for iPhone and iPad","body":"# ALAlertBanner\r\n\r\n## About\r\n\r\nALAlertBanner is a drop-in library for iOS (both iPhone and iPad) that presents beautiful alert banners in a customizable and configurable way. \r\n\r\n### Preview\r\n\r\n![Preview1](https://raw.github.com/alobi/ALAlertBanner/master/Screenshots/screenshot1.gif) ![Preview2](https://raw.github.com/alobi/ALAlertBanner/master/Screenshots/screenshot3.png)\r\n\r\n![Preview3](https://raw.github.com/alobi/ALAlertBanner/master/Screenshots/screenshot2.png)\r\n\r\n### Behind the Scenes\r\n\r\nALAlertBanner uses [Core Animation](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html) and [Grand Central Dispatch](http://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html) under the hood, making it lightweight and stable. A singleton object is used to manage the presentation and dismissal of the alerts in a synchronous manner. \r\n\r\n## Installation\r\n\r\nInstallation is easy.\r\n\r\n1. Download the ZIP from Github and copy the ALAlertBanner directory to your project\r\n2. Link the ```QuartzCore.framework``` library in your project's Build Phases\r\n3. ```#import \"ALAlertBanner.h\"``` in your view of choice\r\n\r\nIf you can compile without errors, congratulations! You're one step closer to... \r\n\r\n(•_•)\r\n\r\n( •_•)>⌐■-■ \r\n\r\n(⌐■_■)\r\n\r\n*...being cool*.\r\n\r\n### Tested Environments\r\n\r\nALAlertBanner has been tested on iOS 5.0 and 5.1 (simulator) and iOS 6.1 (device) with ARC enabled. It should work in older/newer versions/devices, but I'm not positive. \r\n\r\n## Example Usage\r\n\r\nYou should use the ```ALAlertBannerManager``` singleton object to manage all banners. You can easily present a banner in a regular ```UIView``` like so:\r\n\r\n```objc\r\n[[ALAlertBannerManager sharedManager] showAlertBannerInView:self.view \r\n                                      style:ALAlertBannerStyleSuccess \r\n                                      position:ALAlertBannerPositionTop \r\n                                      title:@\"Success!\"\r\n                                      subtitle:@\"Here's a banner. Look how easy that was.\"];\r\n```\r\n\r\nor in a ```UIWindow```:\r\n\r\n```objc\r\nAppDelegate *appDelegate = (AppDelegate*)[[UIApplication sharedApplication] delegate];\r\n[[ALAlertBannerManager sharedManager] showAlertBannerInView:appDelegate.window \r\n                                      style:ALAlertBannerStyleNotify \r\n                                      position:ALAlertBannerPositionUnderNavBar \r\n                                      title:@\"Notify!\"\r\n                                      subtitle:@\"Here's another banner, and it is nice and comfy in its UIWindow\"];\r\n```\r\n\r\nA couple notes: ```title``` is limited to one line and will be truncated if necessary. ```subtitle``` can be any number of lines, or it can also be nil. All other parameters should be used however. \r\n\r\n### Other methods of consideration:\r\n\r\n```objc\r\n-(void)hideAllAlertBanners;\r\n```\r\n\r\nImmediately hide all alert banners.\r\n\r\n```objc\r\n-(void)hideAlertBannersInView:(UIView*)view;\r\n```\r\n\r\nImmediately hide all alert banners within a specific view.\r\n\r\n### Properties\r\n\r\n***Note:*** ALL properties should be set through ```ALAlertBannerManager``` like so:\r\n\r\n```objc\r\n[[ALAlertBannerManager sharedManager] setProperty:0.f];\r\n```\r\n\r\n***End Note***\r\n\r\n---\r\n\r\n```ALAlertBannerManager``` has the following editable properties:\r\n\r\n```objc\r\n/**\r\n Length of time in seconds that a banner should show before auto-hiding. Default is 3.5 seconds. A value <= 0 will disable auto-hiding. \r\n */\r\n@property (nonatomic) NSTimeInterval secondsToShow;\r\n\r\n/**\r\n The length of time it takes a banner to transition on-screen. Default is 0.25 seconds.\r\n */\r\n@property (nonatomic) NSTimeInterval showAnimationDuration;\r\n\r\n/**\r\n The length of time it takes a banner to transition off-screen. Default is 0.2 seconds.\r\n */\r\n@property (nonatomic) NSTimeInterval hideAnimationDuration;\r\n\r\n/**\r\n Banner opacity, between 0 and 1. Default value is 0.93f.\r\n */\r\n@property (nonatomic, assign) CGFloat bannerOpacity;\r\n\r\n/**\r\n Tapping on a banner will dismiss it early. Default is YES.\r\n */\r\n@property (nonatomic, assign) BOOL allowTapToDismiss;\r\n```\r\n\r\n\r\n### Banner Positions\r\n\r\n```objc\r\nALAlertBannerPositionTop = 0\r\n```\r\n\r\nThe banner will be extend down from the top of the screen. If you're presenting it in a:\r\n\r\n* ```UIView```: the banner will extend down from underneath the status bar (if visible)\r\n\r\n* ```UIView``` within a ```UINavigationController```: it will extend down from underneath the navigation bar\r\n\r\n* ```UIWindow```: it should extend down from underneath the status bar but above any other UI elements, like the nav bar for instance \r\n\r\n```objc\r\nALAlertBannerPositionBottom\r\n```\r\n\r\nThe banner will be extend up from the bottom of the screen. \r\n\r\n```objc\r\nALAlertBannerPositionUnderNavBar\r\n```\r\n\r\nThis position should **ONLY** be used if presenting in a ```UIWindow```. It will create an effect similar to ```ALAlertBannerPositionTop``` on a ```UIView``` within a ```UINavigationController``` (i.e. extending down from underneath the navigation bar), but it will in fact be above all other views. It accomplishes this by using a ```CALayer``` mask. This position is useful if you want to do something like set up a \"catch-all\" error handler in your AppDelegate that responds to notifications about a certain event (like network requests, for instance), yet you still want it to animate from underneath the nav bar. \r\n\r\n### Banner Types\r\n\r\n```objc\r\nALAlertBannerStyleSuccess = 0\r\n```\r\n\r\nThe banner will have a cute little checkmark and a nice green gradient.\r\n\r\n```objc\r\nALAlertBannerStyleFailure\r\n```\r\n\r\nThe banner will have a cute little X and a nice red gradient.\r\n\r\n```objc\r\nALAlertBannerStyleNotify\r\n```\r\n\r\nThe banner will have a cute little info symbol and a nice blue gradient.\r\n\r\n```objc\r\nALAlertBannerStyleAlert\r\n```\r\n\r\nThe banner will have a cute little caution triangle and a nice yellow gradient.\r\n\r\nDid I mention they have cute little shapes and nice colorful gradients?\r\n\r\n## Known Issues\r\n\r\n* **FIXED** ~~ALAlertBanner supports all interface orientations. However, if you rotate the device while one or more banners is displaying (or animating), the layout will get fudgesicled. This is just something I haven't figured out how to fix yet.~~\r\n* Alert banners won't rotate when added to a UIWindow. This is something I haven't added yet but will try to get to soon.\r\n* On the topic of rotation, ALAlertBanner listens for ```UIDeviceOrientationDidChangeNotification```  to handle rotation events. I'd prefer to listen for ```UIApplicationDidChangeStatusBarOrientationNotification``` instead but I need the bounds of the banner's superview to update before handling the rotation notification, and the only way to that seems to be by using ```UIDeviceOrientationDidChangeNotification```. If you have an idea on how to fix this, please let me know by submitting a new issue or sending me an email.\r\n* If you find any other bugs, please open a new issue. \r\n\r\n## Contact Me\r\n\r\nYou can reach me anytime at the addresses below. If you use the library, feel free to give me a shoutout on Twitter to let me know how you like it. I'd love to hear your thoughts. \r\n\r\nGithub: [alobi](https://github.com/alobi) <br>\r\nTwitter: [@lobi4nco](https://twitter.com/lobi4nco) <br>\r\nEmail: [anthony@lobian.co](mailto:anthony@lobian.co) \r\n\r\n## Credits & License\r\n\r\nALAlertBanner is developed and maintained by Anthony Lobianco ([@lobi4nco](https://twitter.com/lobi4nco)). Licensed under the MIT License. Basically, I would appreciate attribution if you use it.\r\n\r\nEnjoy!\r\n\r\n(⌐■_■)\r\n","google":"UA-43501903-1","note":"Don't delete this file! It's used internally to help with page regeneration."}